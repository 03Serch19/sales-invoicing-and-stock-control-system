/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfazes;

import clases.ConexionBs;
import java.awt.Color;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author ADMIN
 */
public class Loginn extends javax.swing.JFrame {
TableRowSorter trs;
    DefaultTableModel model = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }

    };

    // String sncom = "";
    // String scoe = "";
    //String spass = "";
    // String stele = "";
    /**
     * Creates new form Loginn
     */
    public Loginn() {
        initComponents();
        this.setLocationRelativeTo(null);
        TextPrompt tpn = new TextPrompt("Nombre de Usuario", tncomple);
        TextPrompt tpc = new TextPrompt("Correo Electronico", tcele);
        TextPrompt tpco = new TextPrompt("***************", pcontrase);
        TextPrompt tptele = new TextPrompt("0000-0000", ttelef);
        TextPrompt tpcons = new TextPrompt("Contrase単a a buscar", tconsu);
        this.setTitle("Sistema ventas SME");
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Administracion de cuentas de usuario - Sistema SME - Sesion de " + InicioSesion.usuario);
        try {
            Connection cn = ConexionBs.conectarb();
            PreparedStatement pst = cn.prepareStatement(
                    "select id, nombre, email, telefono from usuario");
            ResultSet rs = pst.executeQuery();
            tabreusuario = new JTable(model);
            jScrollPane1.setViewportView(tabreusuario);
            model.addColumn(" ");
            model.addColumn("Nombre");
            model.addColumn("Correo");
            //  model.addColumn("Contrase単a");
            model.addColumn("Telefono ");
            while (rs.next()) {
                Object[] fila = new Object[4];
                for (int i = 0; i < 4; i++) {
                    fila[i] = rs.getObject(i + 1);
                }
                model.addRow(fila);
            }
            cn.close();

        } catch (SQLException e) {
            System.err.println("Error al llenar tabla ");
            JOptionPane.showMessageDialog(null, "Error al mostrar informacion...");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pcontrase = new javax.swing.JPasswordField();
        bregistrar = new javax.swing.JButton();
        tncomple = new javax.swing.JTextField();
        tcele = new javax.swing.JTextField();
        jtit = new javax.swing.JLabel();
        lnomb = new javax.swing.JLabel();
        lcorreo = new javax.swing.JLabel();
        lcontra = new javax.swing.JLabel();
        ltelef = new javax.swing.JLabel();
        ttelef = new javax.swing.JTextField();
        bmodifi = new javax.swing.JButton();
        lcons = new javax.swing.JLabel();
        bbuscarr = new javax.swing.JButton();
        beliminar = new javax.swing.JButton();
        tconsu = new javax.swing.JPasswordField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabreusuario = new javax.swing.JTable();
        lfbb = new javax.swing.JLabel();
        tfil = new javax.swing.JTextField();
        bll = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        pcontrase.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        pcontrase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pcontraseActionPerformed(evt);
            }
        });

        bregistrar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        bregistrar.setText("Registrar");
        bregistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bregistrarActionPerformed(evt);
            }
        });

        tncomple.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tncomple.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tncompleActionPerformed(evt);
            }
        });

        tcele.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tcele.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        tcele.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tceleActionPerformed(evt);
            }
        });

        jtit.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jtit.setText("Registro de Usuario");

        lnomb.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lnomb.setText("Nombre de usuario:");

        lcorreo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lcorreo.setText("Correo electronico:");

        lcontra.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lcontra.setText("Contrase単a:");

        ltelef.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ltelef.setText("Numero de telefono:");

        ttelef.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ttelef.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        bmodifi.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        bmodifi.setText("Actualizar");
        bmodifi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bmodifiActionPerformed(evt);
            }
        });

        lcons.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lcons.setText("Contrase単a de usuario:");

        bbuscarr.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        bbuscarr.setText("Buscar");
        bbuscarr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bbuscarrActionPerformed(evt);
            }
        });

        beliminar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        beliminar.setText("Eliminar");
        beliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beliminarActionPerformed(evt);
            }
        });

        tconsu.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tconsu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tconsuActionPerformed(evt);
            }
        });

        tabreusuario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabreusuario);

        lfbb.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lfbb.setText("Filtro de busqueda:");

        tfil.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tfil.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfilKeyTyped(evt);
            }
        });

        bll.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        bll.setText("Limpiar");
        bll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(172, 172, 172)
                        .addComponent(jtit))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lcorreo)
                                .addGap(28, 28, 28)
                                .addComponent(tcele, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lnomb)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lcontra)
                                                .addGap(42, 42, 42)))
                                        .addGap(28, 28, 28))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(ltelef)
                                        .addGap(18, 18, 18)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tncomple, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(pcontrase, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ttelef, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(lcons)
                        .addGap(18, 18, 18)
                        .addComponent(tconsu, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(bbuscarr, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 634, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bregistrar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(beliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bmodifi, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(62, 62, 62))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lfbb, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(tfil, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(114, 114, 114)
                        .addComponent(bll, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jtit)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lnomb, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tncomple, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bregistrar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lcorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tcele, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(bmodifi, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lcontra, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pcontrase, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(beliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ltelef, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ttelef, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lcons, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tconsu, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bbuscarr, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfil, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lfbb, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pcontraseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pcontraseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pcontraseActionPerformed

    private void tncompleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tncompleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tncompleActionPerformed

    private void bregistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bregistrarActionPerformed

        String nombre, correo, contrasss, telefono;
        int valcampos = 0;
        nombre = tncomple.getText().trim();
        correo = tcele.getText().trim();
        contrasss = pcontrase.getText().trim();
        telefono = ttelef.getText().trim();
        if (nombre.equals("")) {
            tncomple.setBackground(Color.red);
            valcampos++;
        }
        if (correo.equals("")) {
            tcele.setBackground(Color.red);
            valcampos++;
        }
        if (contrasss.equals("")) {
            pcontrase.setBackground(Color.red);
            valcampos++;
        }
        if (telefono.equals("")) {
            ttelef.setBackground(Color.red);
            valcampos++;
        }
        try {
            Connection cn2 = ConexionBs.conectarb();
            PreparedStatement pst2 = cn2.prepareStatement("select nombre from usuario where nombre = '" + nombre + "'");
            ResultSet rs = pst2.executeQuery();
            if (rs.next()) {
                tncomple.setBackground(Color.red);
                JOptionPane.showMessageDialog(null, "Nombre de usuario no disponible");
                tncomple.setBackground(Color.WHITE);
                tcele.setBackground(Color.WHITE);
                pcontrase.setBackground(Color.WHITE);
                ttelef.setBackground(Color.WHITE);
                cn2.close();
            } else {
                cn2.close();
                try {
                    Connection cn3 = ConexionBs.conectarb();
                    PreparedStatement pst3 = cn3.prepareStatement("select contrase単a from usuario where contrase単a = '" + contrasss + "'");
                    ResultSet rs2 = pst3.executeQuery();
                    if (rs2.next()) {
                        pcontrase.setBackground(Color.red);
                        JOptionPane.showMessageDialog(null, "Contrase単a de usuario no disponible");
                        tncomple.setBackground(Color.WHITE);
                        tcele.setBackground(Color.WHITE);
                        pcontrase.setBackground(Color.WHITE);
                        ttelef.setBackground(Color.WHITE);
                        cn3.close();
                    } else {
                        cn3.close();
                        if (valcampos == 0) {
                            try {
                                Connection cn = ConexionBs.conectarb();
                                PreparedStatement pst = cn.prepareStatement(
                                        "insert into usuario values(?,?,?,?,?)");

                                pst.setString(1, "0");
                                pst.setString(2, tncomple.getText().trim());
                                pst.setString(3, tcele.getText().trim());
                                pst.setString(4, pcontrase.getText().trim());
                                pst.setString(5, ttelef.getText().trim());
                                pst.executeUpdate();
                                limpiar();
                                JOptionPane.showMessageDialog(null, "Regitro de usuario exitoso");
                                cn.close();
                                model.setRowCount(0);
                                model.setColumnCount(0);
                                try {
                                    Connection cnn = ConexionBs.conectarb();
                                    PreparedStatement pstt = cnn.prepareStatement(
                                            "select id, nombre, email, telefono from usuario");
                                    ResultSet rss = pstt.executeQuery();
                                    tabreusuario = new JTable(model);
                                    jScrollPane1.setViewportView(tabreusuario);
                                    model.addColumn(" ");
                                    model.addColumn("Nombre");
                                    model.addColumn("Correo");
                                    //  model.addColumn("Contrase単a");
                                    model.addColumn("Telefono ");
                                    while (rss.next()) {
                                        Object[] fila = new Object[4];
                                        for (int i = 0; i < 4; i++) {
                                            fila[i] = rss.getObject(i + 1);
                                        }
                                        model.addRow(fila);
                                    }
                                    cnn.close();

                                } catch (SQLException e) {
                                    System.err.println("Error al llenar tabla ");
                                    JOptionPane.showMessageDialog(null, "Error al mostrar informacion...");
                                }
                            } catch (Exception e) {
                                System.out.println("Error en el boton registrar" + e);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Debes llenar todos los campos");
                            tncomple.setBackground(Color.WHITE);
                            tcele.setBackground(Color.WHITE);
                            pcontrase.setBackground(Color.WHITE);
                            ttelef.setBackground(Color.WHITE);
                        }
                    }
                } catch (Exception e) {
                    System.out.println("Error en validar pasww");
                    JOptionPane.showMessageDialog(null, "Error al validar pasww, cantacte al administrador");
                }

            }
        } catch (Exception e) {
            System.out.println("Error en validar nameuser");
            JOptionPane.showMessageDialog(null, "Error al validar name, cantacte al administrador");
        }


    }//GEN-LAST:event_bregistrarActionPerformed

    private void bbuscarrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bbuscarrActionPerformed

        String conul = tconsu.getText().trim();
        if (conul.equals("")) {
            tconsu.setBackground(Color.red);
            JOptionPane.showMessageDialog(null, "No has realizado ninguna busqueda");
            tconsu.setBackground(Color.WHITE);
        } else {
            try {
                Connection cn = ConexionBs.conectarb();

                PreparedStatement pst = cn.prepareStatement("select nombre, email, contrase単a, telefono from usuario where contrase単a = ?");
                pst.setString(1, tconsu.getText().trim());
                ResultSet rs = pst.executeQuery();
                if (rs.next()) {

                    tncomple.setText(rs.getString("nombre"));
                    tcele.setText(rs.getString("email"));
                    pcontrase.setText(rs.getString("contrase単a"));
                    ttelef.setText(rs.getString("telefono"));

                } else {
                    tconsu.setBackground(Color.red);
                    JOptionPane.showMessageDialog(null, "Contrase単a incorrecta...");
                    tconsu.setBackground(Color.WHITE);
                }

            } catch (Exception e) {
                System.err.println("Error en el boton buscar " + e);
                JOptionPane.showMessageDialog(null, "Error al buscar, contacte al personal administrativo");

            }
        }

    }//GEN-LAST:event_bbuscarrActionPerformed

    private void tceleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tceleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tceleActionPerformed

    private void bmodifiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bmodifiActionPerformed
        String nombre, correo, contrasss, telefono;
        int valcampos = 0;
        nombre = tncomple.getText().trim();
        correo = tcele.getText().trim();
        contrasss = pcontrase.getText().trim();
        telefono = ttelef.getText().trim();
        if (nombre.equals("")) {
            tncomple.setBackground(Color.red);
            valcampos++;
        }
        if (correo.equals("")) {
            tcele.setBackground(Color.red);
            valcampos++;
        }
        if (contrasss.equals("")) {
            pcontrase.setBackground(Color.red);
            valcampos++;
        }
        if (telefono.equals("")) {
            ttelef.setBackground(Color.red);
            valcampos++;
        }
        if (valcampos == 0) {
            String passww = tconsu.getText().trim();
            if (passww.equals("")) {
                tconsu.setBackground(Color.red);
                JOptionPane.showMessageDialog(null, "No es posible modificar porque no has ingresado una busqueda");
                tconsu.setBackground(Color.WHITE);
            } else {
                try {
                    Connection cn3 = ConexionBs.conectarb();

                    PreparedStatement pst3 = cn3.prepareStatement("select * from usuario where contrase単a = ?");
                    pst3.setString(1, passww);
                    ResultSet rs2 = pst3.executeQuery();
                    if (rs2.next()) {
                        String nm = rs2.getString("nombre");
                        //int ID = rs2.getByte("id");
                        cn3.close();
                        try {
                            Connection cn4 = ConexionBs.conectarb();

                            PreparedStatement pst4 = cn4.prepareStatement("select nombre from usuario where nombre = ? and not nombre = '" + nm + "'");
                            pst4.setString(1, tncomple.getText().trim());

                            ResultSet rs3 = pst4.executeQuery();
                            if (rs3.next()) {
                                tncomple.setBackground(Color.red);
                                JOptionPane.showMessageDialog(null, "El Nombre de usuario a modificar ya existe");
                                tncomple.setBackground(Color.WHITE);
                                cn4.close();

                            } else {
                                try {
                                    Connection cn5 = ConexionBs.conectarb();

                                    PreparedStatement pst5 = cn5.prepareStatement("select contrase単a from usuario where contrase単a = ? and not contrase単a = '" + passww + "'");
                                    pst5.setString(1, pcontrase.getText().trim());

                                    ResultSet rs4 = pst5.executeQuery();
                                    if (rs4.next()) {
                                        pcontrase.setBackground(Color.red);
                                        JOptionPane.showMessageDialog(null, "La contrase単a de usuario a modificar ya existe");
                                        pcontrase.setBackground(Color.WHITE);
                                        cn5.close();

                                    } else {
                                        try {
                                            Connection cn = ConexionBs.conectarb();

                                            PreparedStatement pst = cn.prepareStatement(
                                                    "update usuario set nombre = ?, email = ?, contrase単a = ?, telefono = ? where contrase単a = '" + passww + "'");

                                            pst.setString(1, tncomple.getText().trim());
                                            pst.setString(2, tcele.getText().trim());
                                            pst.setString(3, pcontrase.getText().trim());
                                            pst.setString(4, ttelef.getText().trim());

                                            pst.executeUpdate();
                                            limpiar();
                                            JOptionPane.showMessageDialog(null, "Registro actualizado");
                                            passww = "";
                                            cn.close();
                                            model.setRowCount(0);
                                            model.setColumnCount(0);
                                            try {
                                                Connection cnn = ConexionBs.conectarb();
                                                PreparedStatement pstt = cnn.prepareStatement(
                                                        "select id, nombre, email, telefono from usuario");
                                                ResultSet rss = pstt.executeQuery();
                                                tabreusuario = new JTable(model);
                                                jScrollPane1.setViewportView(tabreusuario);
                                                model.addColumn(" ");
                                                model.addColumn("Nombre");
                                                model.addColumn("Correo");
                                                //  model.addColumn("Contrase単a");
                                                model.addColumn("Telefono ");
                                                while (rss.next()) {
                                                    Object[] fila = new Object[4];
                                                    for (int i = 0; i < 4; i++) {
                                                        fila[i] = rss.getObject(i + 1);
                                                    }
                                                    model.addRow(fila);
                                                }
                                                cnn.close();

                                            } catch (SQLException e) {
                                                System.err.println("Error al llenar tabla ");
                                                JOptionPane.showMessageDialog(null, "Error al mostrar informacion...");
                                            }
                                        } catch (Exception e) {
                                            System.err.println("Error en el boton actualizar" + e);
                                            JOptionPane.showMessageDialog(null, "Error al actaulizar, contacte al personal administrativo");

                                        }
                                    }
                                } catch (Exception e) {
                                    System.err.println("Error en la consulta de contrase単a " + e);
                                    JOptionPane.showMessageDialog(null, "Error al consultar contrase単a para modificar, contacte al personal administrativo");

                                }
                            }
                        } catch (Exception e) {
                            System.err.println("Error en la consulta del nombre " + e);
                            JOptionPane.showMessageDialog(null, "Error al consultar nombre para modificar, contacte al personal administrativo");

                        }

                    } else {
                        cn3.close();
                        tconsu.setBackground(Color.red);
                        JOptionPane.showMessageDialog(null, "El Usuario consultado para actualizar no existe");
                        tconsu.setBackground(Color.WHITE);
                    }
                } catch (Exception e) {
                    System.err.println("Error en la consulta de nombre " + e);
                    JOptionPane.showMessageDialog(null, "Error al consultar nombre, contacte al personal administrativo");

                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "No has realizado ninguna busqueda o hay campos vacios");
            tncomple.setBackground(Color.WHITE);
            tcele.setBackground(Color.WHITE);
            pcontrase.setBackground(Color.WHITE);
            ttelef.setBackground(Color.WHITE);

        }
    }//GEN-LAST:event_bmodifiActionPerformed

    private void beliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beliminarActionPerformed
        String nombre, correo, contrasss, telefono;
        int valcampos = 0;
        nombre = tncomple.getText().trim();
        correo = tcele.getText().trim();
        contrasss = pcontrase.getText().trim();
        telefono = ttelef.getText().trim();
        if (nombre.equals("")) {
            tncomple.setBackground(Color.red);
            valcampos++;
        }
        if (correo.equals("")) {
            tcele.setBackground(Color.red);
            valcampos++;
        }
        if (contrasss.equals("")) {
            pcontrase.setBackground(Color.red);
            valcampos++;
        }
        if (telefono.equals("")) {
            ttelef.setBackground(Color.red);
            valcampos++;
        }
        if (valcampos == 0) {
            String cconsu = tconsu.getText().trim();
            if (cconsu.equals("")) {
                tconsu.setBackground(Color.red);
                JOptionPane.showMessageDialog(null, "No es posible eliminar porque no has ingresado una busqueda");
                tconsu.setBackground(Color.WHITE);
            } else {
                try {
                    Connection cn3 = ConexionBs.conectarb();

                    PreparedStatement pst3 = cn3.prepareStatement("select * from usuario where contrase単a = ?");
                    pst3.setString(1, cconsu);
                    ResultSet rs2 = pst3.executeQuery();
                    if (rs2.next()) {
                        int ID = rs2.getInt("id");
                        cn3.close();
                        try {
                            Connection cn = ConexionBs.conectarb();

                            PreparedStatement pst = cn.prepareStatement(
                                    "delete from usuario where id = ?");
                            pst.setInt(1, ID);

                            pst.executeUpdate();
                            limpiar();
                            JOptionPane.showMessageDialog(null, "Registro eliminado");
                             cn.close();
                                model.setRowCount(0);
                                model.setColumnCount(0);
                                try {
                                    Connection cnn = ConexionBs.conectarb();
                                    PreparedStatement pstt = cnn.prepareStatement(
                                            "select id, nombre, email, telefono from usuario");
                                    ResultSet rss = pstt.executeQuery();
                                    tabreusuario = new JTable(model);
                                    jScrollPane1.setViewportView(tabreusuario);
                                    model.addColumn(" ");
                                    model.addColumn("Nombre");
                                    model.addColumn("Correo");
                                    //  model.addColumn("Contrase単a");
                                    model.addColumn("Telefono ");
                                    while (rss.next()) {
                                        Object[] fila = new Object[4];
                                        for (int i = 0; i < 4; i++) {
                                            fila[i] = rss.getObject(i + 1);
                                        }
                                        model.addRow(fila);
                                    }
                                    cnn.close();

                                } catch (SQLException e) {
                                    System.err.println("Error al llenar tabla ");
                                    JOptionPane.showMessageDialog(null, "Error al mostrar informacion...");
                                }
                        } catch (Exception e) {
                            System.err.println("Error en el boton eliminar" + e);
                            JOptionPane.showMessageDialog(null, "Error al eliminar, contacte al personal administrativo");

                        }
                    } else {
                        cn3.close();
                        tconsu.setBackground(Color.red);
                        JOptionPane.showMessageDialog(null, "El usuario consultado para eliminar no existe");
                        tconsu.setBackground(Color.WHITE);
                    }
                } catch (Exception e) {
                    System.err.println("Error en la consulta de contrase単a " + e);
                    JOptionPane.showMessageDialog(null, "Error al consultar contrase単a, contacte al personal administrativo");

                }

            }
        } else {
            JOptionPane.showMessageDialog(null, "No has realizado ninguna busqueda o hay campos vacios");
            tncomple.setBackground(Color.WHITE);
            tcele.setBackground(Color.WHITE);
            pcontrase.setBackground(Color.WHITE);
            ttelef.setBackground(Color.WHITE);
        }
    }//GEN-LAST:event_beliminarActionPerformed

    private void tconsuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tconsuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tconsuActionPerformed

    private void tfilKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfilKeyTyped
        tfil.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                trs.setRowFilter(RowFilter.regexFilter("(?i)" + tfil.getText(), 1));
            }

        });
        trs = new TableRowSorter(model);
        tabreusuario.setRowSorter(trs);
    }//GEN-LAST:event_tfilKeyTyped

    private void bllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bllActionPerformed
     limpiar();
     tconsu.setText("");
     tfil.setText("");
    }//GEN-LAST:event_bllActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Loginn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Loginn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Loginn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Loginn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Loginn().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bbuscarr;
    private javax.swing.JButton beliminar;
    private javax.swing.JButton bll;
    private javax.swing.JButton bmodifi;
    private javax.swing.JButton bregistrar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jtit;
    private javax.swing.JLabel lcons;
    private javax.swing.JLabel lcontra;
    private javax.swing.JLabel lcorreo;
    private javax.swing.JLabel lfbb;
    private javax.swing.JLabel lnomb;
    private javax.swing.JLabel ltelef;
    private javax.swing.JPasswordField pcontrase;
    private javax.swing.JTable tabreusuario;
    private javax.swing.JTextField tcele;
    private javax.swing.JPasswordField tconsu;
    private javax.swing.JTextField tfil;
    private javax.swing.JTextField tncomple;
    private javax.swing.JTextField ttelef;
    // End of variables declaration//GEN-END:variables
public void limpiar() {
        tncomple.setText("");
        tcele.setText("");
        pcontrase.setText("");
        ttelef.setText("");

    }
}
